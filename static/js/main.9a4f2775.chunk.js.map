{"version":3,"sources":["component/Navbar.tsx","context/alert/AlertContext.tsx","context/github/GitHubContext.tsx","component/Search.tsx","component/Card.tsx","component/Loader.tsx","pages/Home.tsx","pages/About.tsx","component/Repos.tsx","pages/Profile.tsx","component/Alert.tsx","context/alert/alertReducer.ts","context/types.ts","context/alert.ts","context/alert/AlertState.tsx","context/github/githubReducer.ts","api/apiGithub.ts","context/github.ts","context/github/GitHubState.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","props","className","exact","to","AlertContext","React","createContext","GitHubContext","Search","useState","value","setValue","useContext","show","hide","searchUsers","clearUsers","type","placeholder","onChange","e","currentTarget","onKeyPress","key","trim","Card","src","user","avatar_url","alt","login","Loader","Home","users","loading","Fragment","length","map","id","About","Repos","repos","repo","href","html_url","target","name","withRouter","getUser","getRepos","useEffect","match","params","company","location","bio","blog","followers","following","public_repos","public_gists","style","width","rel","Alert","alert","role","text","aria-label","onClick","aria-hidden","alertReducer","state","action","payload","actionsAlert","AlertState","useReducer","dispatch","Provider","children","githubReducer","withCred","url","apiGithub","axios","get","then","response","data","items","actionsGit","userProfile","initialState","GitHubState","a","setLoading","App","path","render","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a4f2775.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ninterface IProps {}\r\n\r\nconst Navbar = (props: IProps) => {\r\n    return (\r\n        <nav className={'navbar navbar-dark bg-primary navbar-expand-lg'}>\r\n            <div className=\"navbar-brand\">\r\n                Navbar\r\n            </div>\r\n            <ul className={'navbar-nav'}>\r\n                <li className=\"nav-item\">\r\n                    <NavLink className={'nav-link'} exact to=\"/\">Главная</NavLink>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <NavLink className={'nav-link'} to=\"/about\">Информация</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nexport interface AlertContextInterface {\r\n    show: (text: string, type?: string) => void\r\n    hide: () => void\r\n    alert: IAlert | null\r\n}\r\n\r\nexport interface IAlert {\r\n    type: string\r\n    text: string\r\n}\r\n\r\nconst  AlertContext = React.createContext<AlertContextInterface | null>(null);\r\n\r\nexport default AlertContext;\r\n\r\n","import React from 'react';\r\nimport {IRepo, IUser, IUserProfile} from \"./GitHubState\";\r\n\r\nexport interface IGitHubContext {\r\n    searchUsers: (value: string) => void;\r\n    getRepos: (name: string) => void;\r\n    getUser: (name: string) => void;\r\n    setLoading: () => void;\r\n    clearUsers: () => void;\r\n    user: IUser | IUserProfile;\r\n    users: IUser[];\r\n    loading: boolean;\r\n    repos: IRepo[];\r\n}\r\n\r\nconst  GitHubContext = React.createContext<IGitHubContext | null>(null);\r\n\r\nexport default GitHubContext;\r\n\r\n","import React, {useContext, useState} from 'react';\r\nimport AlertContext, { AlertContextInterface } from \"../context/alert/AlertContext\";\r\nimport GitHubContext, {IGitHubContext} from \"../context/github/GitHubContext\";\r\n\r\nconst Search = (props: {}) => {\r\n    const [value, setValue] = useState<string>('');\r\n    const {show, hide} = useContext(AlertContext) as AlertContextInterface;\r\n    const {searchUsers, clearUsers} = useContext(GitHubContext) as IGitHubContext;\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value);\r\n    };\r\n\r\n    const handleSubmit = (e:  React.KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key !== 'Enter') return;\r\n\r\n        clearUsers();\r\n\r\n        if(value.trim()){\r\n            searchUsers(value.trim());\r\n            hide();\r\n        } else {\r\n            if(show) {\r\n                show('Введите данные пользователя!');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={'form-group'}>\r\n            <input\r\n                type='text'\r\n                className='form-control'\r\n                placeholder={'Введите имя пользователя'}\r\n                value={value}\r\n                onChange={handleChange}\r\n                onKeyPress={handleSubmit}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {IUser} from \"../context/github/GitHubState\";\r\n\r\ninterface IProps {\r\n    user: IUser\r\n}\r\n\r\nconst Card = (props: IProps) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={props.user.avatar_url} className=\"card-img-top\" alt={props.user.login}/>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{props.user.login}</h5>\r\n                <Link to={`/profile/${props.user.login}`} className=\"btn btn-primary\">Открыть</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Card;","import React from \"react\";\r\nimport './Loader.scss'\r\n\r\nconst Loader = () => {\r\n    return(\r\n        <div className=\"lds-dual-ring\" />\r\n    )\r\n};\r\n\r\nexport default Loader;","import React, {useContext} from 'react';\r\nimport Search from '../component/Search';\r\nimport Card from '../component/Card';\r\nimport GitHubContext, {IGitHubContext} from \"../context/github/GitHubContext\";\r\n\r\nimport Loader from \"../component/Loader\";\r\nimport {IUser} from \"../context/github/GitHubState\";\r\n\r\nconst Home = () => {\r\n    const {users, loading} = useContext(GitHubContext) as IGitHubContext;\r\ndebugger\r\n    return (\r\n        <React.Fragment>\r\n            <Search/>\r\n\r\n            <div className={'row'}>\r\n                {loading &&  <Loader/>}\r\n                {\r\n                    users.length === 0\r\n                    ? <p className={'text-center'}>Список пуст</p>\r\n                    : users.map((user: IUser) => {\r\n                        return (\r\n                            <div className={'col-sm-4 mb-4'} key={user.id}>\r\n                                <Card user={user} />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\n\r\ninterface IProps {\r\n}\r\n\r\nconst About = (props: IProps) => {\r\n    return (\r\n        <div className=\"jumbotron\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Информация</h1>\r\n                <p className=\"lead\">Версия приложежния <strong>1.0.0</strong></p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default About;","import React from \"react\";\r\nimport {IRepo} from \"../context/github/GitHubState\";\r\n\r\ntype IProps = {\r\n    repos: IRepo[]\r\n}\r\n\r\nconst Repos = (props: IProps) => {\r\n    return (\r\n        <React.Fragment>\r\n            {props.repos.map((repo: IRepo) => {\r\n                return (\r\n                    <div className={'card mb-3'} key={repo.id}>\r\n                        <div className={'card-body'}>\r\n                            <h5>\r\n                                <a href={repo.html_url} target={'_blank'}>{repo.name}</a>\r\n                            </h5>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Repos;","import React, {useContext, useEffect, Fragment} from 'react';\r\nimport GitHubContext, {IGitHubContext} from \"../context/github/GitHubContext\";\r\nimport {withRouter, Link} from 'react-router-dom';\r\nimport {IUserProfile} from \"../context/github/GitHubState\";\r\nimport Loader from \"../component/Loader\";\r\nimport Repos from \"../component/Repos\";\r\n\r\n\r\nconst Profile = (props: any) => {\r\n    const {getUser, getRepos, loading, user, repos} = useContext(GitHubContext) as IGitHubContext;\r\n    useEffect(() => {\r\n        getUser(props.match.params.name);\r\n        getRepos(props.match.params.name);\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n\r\n    const {\r\n        name, company, avatar_url,\r\n        location, bio, blog,\r\n        login, html_url, followers,\r\n        following, public_repos,\r\n        public_gists\r\n    } = user as IUserProfile;\r\n\r\n    return (\r\n        <Fragment>\r\n            <Link to=\"/\" className=\"btn btn-link\">На главную</Link>\r\n\r\n            <div className=\"card mb-4\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-3 text-center\">\r\n                            <img\r\n                                src={avatar_url}\r\n                                alt={name}\r\n                                style={{width: '150px'}}\r\n                            />\r\n                            <h1>{name}</h1>\r\n                            {location && <p>Местоположение: {location}</p>}\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            {\r\n                                bio && <Fragment>\r\n                                    <h3>BIO</h3>\r\n                                    <p>{bio}</p>\r\n                                </Fragment>\r\n                            }\r\n                            <a\r\n                                href={html_url}\r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\"\r\n                                className=\"btn btn-dark\"\r\n                            >Открыть профиль</a>\r\n                            <ul>\r\n                                {login && <li>\r\n                                    <strong>Username: </strong> {login}\r\n                                </li>}\r\n\r\n                                {company && <li>\r\n                                    <strong>Компания: </strong> {company}\r\n                                </li>}\r\n\r\n                                {blog && <li>\r\n                                    <strong>Website: </strong> {blog}\r\n                                </li>}\r\n                            </ul>\r\n                            <div className=\"badge badge-primary\">Подписчики: {followers}</div>\r\n                            <div className=\"badge badge-success\">Подписан: {following}</div>\r\n                            <div className=\"badge badge-info\">Репозитории: {public_repos}</div>\r\n                            <div className=\"badge badge-dark\">Gists: {public_gists}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Repos repos={repos}/>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default withRouter(Profile);","import React, {useContext} from 'react';\r\nimport AlertContext, { AlertContextInterface } from '../context/alert/AlertContext';\r\n\r\nconst Alert = () => {\r\n    const {alert, hide} = useContext(AlertContext) as AlertContextInterface;\r\n\r\n    if(!alert) return null;\r\n\r\n    return (\r\n        <div className={`alert alert-${alert.type || 'warning'} alert-dismissible`} role=\"alert\">\r\n            {alert.text}\r\n            <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={hide}>\r\n                <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Alert;","import {HIDE_ALERT, SHOW_ALERT} from \"../types\";\r\nimport {AlertActionTypes} from \"../alert\";\r\n\r\nexport const alertReducer = (state: any, action: AlertActionTypes) => {\r\n    switch (action.type) {\r\n        case SHOW_ALERT:\r\n            return action.payload;\r\n        case HIDE_ALERT:\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n","export const SHOW_ALERT = 'SHOW_ALERT';\r\nexport const HIDE_ALERT = 'HIDE_ALERT';\r\n\r\nexport const CLEAR_USERS = 'CLEAR_USERS';\r\nexport const GET_REPOS = 'GET_REPOS';\r\nexport const GET_USER = 'GET_USER';\r\nexport const SEARCH_USERS = 'SEARCH_USERS';\r\nexport const SET_LOADING = 'SET_LOADING';\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string] : infer U} ? U : never\r\nexport type InferActionsTypes<T extends {[ket: string]: (...arg: any[]) => any}> = ReturnType<PropertiesTypes<T>>","import {InferActionsTypes} from \"./types\";\r\n\r\nexport type AlertActionTypes = InferActionsTypes<typeof actionsAlert>;\r\n\r\nexport const actionsAlert = {\r\n    hideAC: () => ({type: 'HIDE_ALERT'} as const),\r\n    showAC : (text: string, type: string) => ({type: 'SHOW_ALERT', payload: {text, type}} as const),\r\n};","import React, {useReducer} from 'react';\r\nimport AlertContext from \"./AlertContext\";\r\nimport {alertReducer} from \"./alertReducer\";\r\nimport {actionsAlert} from \"../alert\";\r\n\r\ninterface IProps {\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const AlertState = (props: IProps) => {\r\n    const [state, dispatch] = useReducer(alertReducer, null);\r\n\r\n    const hide = () => dispatch(actionsAlert.hideAC());\r\n    const show = (text: string, type: string = 'secondary') => dispatch(actionsAlert.showAC(text, type));\r\n\r\n    return (\r\n        <AlertContext.Provider value={{\r\n            hide, show, alert: state\r\n        }}>\r\n            {props.children}\r\n        </AlertContext.Provider>\r\n    )\r\n};","import {CLEAR_USERS, GET_REPOS, GET_USER, SEARCH_USERS, SET_LOADING} from \"../types\";\r\nimport {GithubActionTypes} from \"../github\";\r\nimport {IState} from \"./GitHubState\";\r\n\r\nexport const githubReducer = (state: IState, action: GithubActionTypes) => {\r\n    switch (action.type) {\r\n        case SEARCH_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.payload,\r\n                loading: false\r\n            };\r\n        case GET_REPOS:\r\n            return {\r\n                ...state,\r\n                repos: action.payload,\r\n                loading: false\r\n            };\r\n        case GET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.payload,\r\n                loading: false\r\n            };\r\n        case SET_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case CLEAR_USERS:\r\n            return {\r\n                ...state,\r\n                users: []\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n","import axios from 'axios';\r\nimport {IRepo, IUser, IUserProfile} from \"../context/github/GitHubState\";\r\n\r\nconst CLIENT_ID = 'Iv1.51f60f5bee1dff78';\r\nconst CLIENT_SECRET = 'ea8b173349a977b78b882d228823ddc52ed88de8';\r\n\r\nconst withCred = (url: string): string => {\r\n    return `${url}client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`\r\n};\r\n\r\n\r\nexport const apiGithub = {\r\n    searchUsers(value: string): Promise<IUser[]> {\r\n        return axios.get<IResponseSearchUsers>(withCred(`https://api.github.com/search/users?q=${value}&`))\r\n            .then(response => {\r\n                return response.data.items;\r\n            })\r\n    },\r\n    getUser(name: string): Promise<IUserProfile> {\r\n        return axios.get<IUserProfile>(withCred(`https://api.github.com/users/${name}?`))\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    getRepos(name: string): Promise<IRepo[]> {\r\n        return axios.get<IRepo[]>(withCred(`https://api.github.com/users/${name}/repos?per_page=5&`))\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    }\r\n};\r\n\r\n//Search Users interface\r\ninterface IResponseSearchUsers {\r\n    items: IUser[]\r\n}\r\n\r\n\r\n\r\n","import {IRepo, IUser, IUserProfile} from \"./github/GitHubState\";\r\nimport { InferActionsTypes } from \"./types\";\r\n\r\nexport type GithubActionTypes = InferActionsTypes<typeof actionsGit>\r\n\r\nexport const actionsGit = {\r\n    searchUsersAC : (users: IUser[]) => ({type: 'SEARCH_USERS', payload: users} as const),\r\n    setLoadingAC : () => ({type: 'SET_LOADING'} as const),\r\n    clearUsersAC : () => ({type: 'CLEAR_USERS'} as const),\r\n    getUserAC : (userProfile: IUserProfile) => ({type: 'GET_USER', payload: userProfile} as const),\r\n    getReposAC : (repos: IRepo[]) => ({type: 'GET_REPOS', payload: repos} as const)\r\n};\r\n\r\n\r\n","import React, {useReducer} from 'react';\r\nimport GitHubContext from \"./GitHubContext\";\r\nimport {githubReducer} from \"./githubReducer\";\r\nimport {apiGithub} from \"../../api/apiGithub\";\r\nimport {actionsGit} from \"../github\";\r\n\r\ninterface IProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport interface IUser {\r\n    login: string;\r\n    id: number;\r\n    node_id: string;\r\n    avatar_url: string;\r\n    gravatar_id: string;\r\n    url: string;\r\n    html_url: string;\r\n    followers_url: string;\r\n    following_url: string;\r\n    gists_url: string;\r\n    starred_url: string;\r\n    subscriptions_url: string;\r\n    organizations_url: string;\r\n    repos_url: string;\r\n    events_url: string;\r\n    received_events_url: string;\r\n    type: string;\r\n    site_admin: boolean;\r\n    score: number;\r\n}\r\n\r\nexport interface IUserProfile {\r\n    login: string;\r\n    id: number;\r\n    node_id: string;\r\n    avatar_url: string;\r\n    gravatar_id: string;\r\n    url: string;\r\n    html_url: string;\r\n    followers_url: string;\r\n    following_url: string;\r\n    gists_url: string;\r\n    starred_url: string;\r\n    subscriptions_url: string;\r\n    organizations_url: string;\r\n    repos_url: string;\r\n    events_url: string;\r\n    received_events_url: string;\r\n    type: string;\r\n    site_admin: false\r\n    name: string;\r\n    company: null\r\n    blog: string;\r\n    location: string;\r\n    email: null | string;\r\n    hireable: null | string;\r\n    bio: string;\r\n    public_repos: number;\r\n    public_gists: number;\r\n    followers: number;\r\n    following: number;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface IRepo {\r\n    id: number;\r\n    node_id: string;\r\n    name: string;\r\n    full_name: string;\r\n    private: boolean;\r\n    owner: object;\r\n    html_url: string;\r\n    description: string;\r\n    fork: boolean;\r\n    url: string;\r\n    forks_url: string;\r\n    keys_url: string;\r\n    collaborators_url: string;\r\n    teams_url: string;\r\n    hooks_url: string;\r\n    issue_events_url: string;\r\n    events_url: string;\r\n    assignees_url: string;\r\n    branches_url: string;\r\n    tags_url: string;\r\n    blobs_url: string;\r\n    git_tags_url: string;\r\n    git_refs_url: string;\r\n    trees_url: string;\r\n    statuses_url: string;\r\n    languages_url: string;\r\n    stargazers_url: string;\r\n    contributors_url: string;\r\n    subscribers_url: string;\r\n    subscription_url: string;\r\n    commits_url: string;\r\n    git_commits_url: string;\r\n    comments_url: string;\r\n    issue_comment_url: string;\r\n    contents_url: string;\r\n    compare_url: string;\r\n    merges_url: string;\r\n    archive_url: string;\r\n    downloads_url: string;\r\n    issues_url: string;\r\n    pulls_url: string;\r\n    milestones_url: string;\r\n    notifications_url:string;\r\n    labels_url: string;\r\n    releases_url: string;\r\n    deployments_url: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n    pushed_at: string;\r\n    git_url: string;\r\n    ssh_url: string;\r\n    clone_url: string;\r\n    svn_url: string;\r\n    homepage: null\r\n    size: number;\r\n    stargazers_count: number;\r\n    watchers_count: number\r\n    language: string;\r\n    has_issues: boolean;\r\n    has_projects: boolean;\r\n    has_downloads: boolean;\r\n    has_wiki: boolean;\r\n    has_pages: boolean;\r\n    forks_count: number;\r\n    mirror_url: null\r\n    archived: boolean;\r\n    disabled: boolean;\r\n    open_issues_count: number;\r\n    license: null;\r\n    forks: number;\r\n    open_issues: number;\r\n    watchers: number;\r\n    default_branch: string;\r\n}\r\n\r\nconst initialState = {\r\n    user: {} as IUser | IUserProfile,\r\n    users: [] as IUser[],\r\n    loading: false,\r\n    repos: [] as IRepo[]\r\n};\r\nexport  type IState = typeof initialState\r\n\r\nexport const GitHubState = (props: IProps) => {\r\n\r\n    const [state, dispatch] = useReducer(githubReducer, initialState);\r\n\r\n    const searchUsers = async (value: string) => {\r\n        setLoading();\r\n        const users = await apiGithub.searchUsers(value);\r\n        const p = users as IUser[];\r\n        dispatch(actionsGit.searchUsersAC(p));\r\n    };\r\n\r\n    const getRepos = async (name: string) => {\r\n        setLoading();\r\n        const repos = await apiGithub.getRepos(name);\r\n        dispatch(actionsGit.getReposAC(repos))\r\n    };\r\n\r\n    const getUser = async (name: string) => {\r\n        setLoading();\r\n        const userProfile = await apiGithub.getUser(name);\r\n        dispatch(actionsGit.getUserAC(userProfile));\r\n    };\r\n\r\n    const {user, users, loading, repos} = state;\r\n\r\n    const setLoading = () => dispatch(actionsGit.setLoadingAC());\r\n    const clearUsers = () => dispatch(actionsGit.clearUsersAC());\r\n\r\n    return (\r\n        <GitHubContext.Provider value={{\r\n            searchUsers, getRepos, getUser, setLoading, clearUsers,\r\n            user, users, loading, repos\r\n        }}>\r\n            {props.children}\r\n        </GitHubContext.Provider>\r\n    )\r\n};\r\n\r\n\r\n","import React from 'react';\nimport Navbar from \"./component/Navbar\";\nimport Home from './pages/Home';\nimport {Route, Switch} from 'react-router-dom';\nimport About from \"./pages/About\";\nimport Profile from \"./pages/Profile\";\nimport Alert from \"./component/Alert\";\nimport {AlertState} from './context/alert/AlertState';\nimport {GitHubState} from \"./context/github/GitHubState\";\n\nfunction App() {\n    return (\n        <GitHubState>\n            <AlertState>\n                <React.Fragment>\n                    <Navbar/>\n                    <div className={'container pt-4'}>\n                        <Alert/>\n                        <Switch>\n                            <Route path={'/'} exact render={() => <Home/>}/>\n                            <Route path={'/about'} render={() => <About/>}/>\n                            <Route path={'/profile/:name'} render={() => <Profile/>}/>\n                        </Switch>\n                    </div>\n                </React.Fragment>\n            </AlertState>\n        </GitHubState>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}